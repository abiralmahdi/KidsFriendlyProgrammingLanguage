
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programCOLON COMMA DIVIDE DO ELSE END EQUALS FACTORIAL FROM GT IDENTIFIER IF LBRACKET LPAREN LT MINUS NUMBER PLUS RBRACKET REPEAT RPAREN SEMICOLON STRING THEN TIMES TOprogram : program statement\n               | statementstatement : expression SEMICOLON\n                 | repeat_loop \n                 | if_statement\n                 | if_else_statementexpression : IDENTIFIER EQUALS expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression GT expression\n                  | expression LT expressionexpression : expression FACTORIALexpression : NUMBERexpression : IDENTIFIERexpression : LBRACKET arguments RBRACKETarguments : expression\n                 | arguments COMMA expression\n                 | emptyexpression : STRINGexpression : IDENTIFIER LPAREN arguments RPARENrepeat_loop : REPEAT IDENTIFIER FROM expression TO expression DO COLON program END SEMICOLONif_statement : IF expression THEN COLON program END SEMICOLONif_else_statement : IF expression THEN COLON program ELSE COLON program END SEMICOLONempty :'
    
_lr_action_items = {'IDENTIFIER':([0,1,2,4,5,6,9,11,12,13,14,15,16,17,18,19,20,22,23,38,39,44,45,46,51,52,53,54,55,58,59,],[7,7,-2,-4,-5,-6,7,27,7,-1,-3,7,7,7,7,7,7,7,7,7,7,7,7,7,-24,7,7,7,7,-25,-23,]),'NUMBER':([0,1,2,4,5,6,9,12,13,14,15,16,17,18,19,20,22,23,38,39,44,45,46,51,52,53,54,55,58,59,],[8,8,-2,-4,-5,-6,8,8,-1,-3,8,8,8,8,8,8,8,8,8,8,8,8,8,-24,8,8,8,8,-25,-23,]),'LBRACKET':([0,1,2,4,5,6,9,12,13,14,15,16,17,18,19,20,22,23,38,39,44,45,46,51,52,53,54,55,58,59,],[9,9,-2,-4,-5,-6,9,9,-1,-3,9,9,9,9,9,9,9,9,9,9,9,9,9,-24,9,9,9,9,-25,-23,]),'STRING':([0,1,2,4,5,6,9,12,13,14,15,16,17,18,19,20,22,23,38,39,44,45,46,51,52,53,54,55,58,59,],[10,10,-2,-4,-5,-6,10,10,-1,-3,10,10,10,10,10,10,10,10,10,10,10,10,10,-24,10,10,10,10,-25,-23,]),'REPEAT':([0,1,2,4,5,6,13,14,44,46,51,52,53,54,55,58,59,],[11,11,-2,-4,-5,-6,-1,-3,11,11,-24,11,11,11,11,-25,-23,]),'IF':([0,1,2,4,5,6,13,14,44,46,51,52,53,54,55,58,59,],[12,12,-2,-4,-5,-6,-1,-3,12,12,-24,12,12,12,12,-25,-23,]),'$end':([1,2,4,5,6,13,14,51,58,59,],[0,-2,-4,-5,-6,-1,-3,-24,-25,-23,]),'END':([2,4,5,6,13,14,46,51,54,55,58,59,],[-2,-4,-5,-6,-1,-3,48,-24,56,57,-25,-23,]),'ELSE':([2,4,5,6,13,14,46,51,58,59,],[-2,-4,-5,-6,-1,-3,49,-24,-25,-23,]),'SEMICOLON':([3,7,8,10,21,29,30,31,32,33,34,35,37,41,48,56,57,],[14,-16,-15,-21,-14,-8,-9,-10,-11,-12,-13,-7,-17,-22,51,58,59,]),'PLUS':([3,7,8,10,21,25,28,29,30,31,32,33,34,35,37,41,42,43,47,],[15,-16,-15,-21,-14,15,15,15,15,15,15,15,15,15,-17,-22,15,15,15,]),'MINUS':([3,7,8,10,21,25,28,29,30,31,32,33,34,35,37,41,42,43,47,],[16,-16,-15,-21,-14,16,16,16,16,16,16,16,16,16,-17,-22,16,16,16,]),'TIMES':([3,7,8,10,21,25,28,29,30,31,32,33,34,35,37,41,42,43,47,],[17,-16,-15,-21,-14,17,17,17,17,17,17,17,17,17,-17,-22,17,17,17,]),'DIVIDE':([3,7,8,10,21,25,28,29,30,31,32,33,34,35,37,41,42,43,47,],[18,-16,-15,-21,-14,18,18,18,18,18,18,18,18,18,-17,-22,18,18,18,]),'GT':([3,7,8,10,21,25,28,29,30,31,32,33,34,35,37,41,42,43,47,],[19,-16,-15,-21,-14,19,19,19,19,19,19,19,19,19,-17,-22,19,19,19,]),'LT':([3,7,8,10,21,25,28,29,30,31,32,33,34,35,37,41,42,43,47,],[20,-16,-15,-21,-14,20,20,20,20,20,20,20,20,20,-17,-22,20,20,20,]),'FACTORIAL':([3,7,8,10,21,25,28,29,30,31,32,33,34,35,37,41,42,43,47,],[21,-16,-15,-21,-14,21,21,21,21,21,21,21,21,21,-17,-22,21,21,21,]),'EQUALS':([7,],[22,]),'RBRACKET':([7,8,9,10,21,24,25,26,29,30,31,32,33,34,35,37,41,42,],[-16,-15,-26,-21,-14,37,-18,-20,-8,-9,-10,-11,-12,-13,-7,-17,-22,-19,]),'COMMA':([7,8,9,10,21,23,24,25,26,29,30,31,32,33,34,35,36,37,41,42,],[-16,-15,-26,-21,-14,-26,38,-18,-20,-8,-9,-10,-11,-12,-13,-7,38,-17,-22,-19,]),'THEN':([7,8,10,21,28,29,30,31,32,33,34,35,37,41,],[-16,-15,-21,-14,40,-8,-9,-10,-11,-12,-13,-7,-17,-22,]),'RPAREN':([7,8,10,21,23,25,26,29,30,31,32,33,34,35,36,37,41,42,],[-16,-15,-21,-14,-26,-18,-20,-8,-9,-10,-11,-12,-13,-7,41,-17,-22,-19,]),'TO':([7,8,10,21,29,30,31,32,33,34,35,37,41,43,],[-16,-15,-21,-14,-8,-9,-10,-11,-12,-13,-7,-17,-22,45,]),'DO':([7,8,10,21,29,30,31,32,33,34,35,37,41,47,],[-16,-15,-21,-14,-8,-9,-10,-11,-12,-13,-7,-17,-22,50,]),'LPAREN':([7,],[23,]),'FROM':([27,],[39,]),'COLON':([40,49,50,],[44,52,53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,44,52,53,],[1,46,54,55,]),'statement':([0,1,44,46,52,53,54,55,],[2,13,2,13,2,2,13,13,]),'expression':([0,1,9,12,15,16,17,18,19,20,22,23,38,39,44,45,46,52,53,54,55,],[3,3,25,28,29,30,31,32,33,34,35,25,42,43,3,47,3,3,3,3,3,]),'repeat_loop':([0,1,44,46,52,53,54,55,],[4,4,4,4,4,4,4,4,]),'if_statement':([0,1,44,46,52,53,54,55,],[5,5,5,5,5,5,5,5,]),'if_else_statement':([0,1,44,46,52,53,54,55,],[6,6,6,6,6,6,6,6,]),'arguments':([9,23,],[24,36,]),'empty':([9,23,],[26,26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program statement','program',2,'p_program','parser.py',6),
  ('program -> statement','program',1,'p_program','parser.py',7),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','parser.py',15),
  ('statement -> repeat_loop','statement',1,'p_statement','parser.py',16),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',17),
  ('statement -> if_else_statement','statement',1,'p_statement','parser.py',18),
  ('expression -> IDENTIFIER EQUALS expression','expression',3,'p_expression_assign','parser.py',23),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',27),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',28),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',29),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',30),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',31),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',32),
  ('expression -> expression FACTORIAL','expression',2,'p_expression_unaryop','parser.py',36),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',40),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',44),
  ('expression -> LBRACKET arguments RBRACKET','expression',3,'p_expression_list','parser.py',48),
  ('arguments -> expression','arguments',1,'p_arguments','parser.py',52),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','parser.py',53),
  ('arguments -> empty','arguments',1,'p_arguments','parser.py',54),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',64),
  ('expression -> IDENTIFIER LPAREN arguments RPAREN','expression',4,'p_expression_function_call','parser.py',69),
  ('repeat_loop -> REPEAT IDENTIFIER FROM expression TO expression DO COLON program END SEMICOLON','repeat_loop',11,'p_repeat_loop','parser.py',74),
  ('if_statement -> IF expression THEN COLON program END SEMICOLON','if_statement',7,'p_if_statement','parser.py',79),
  ('if_else_statement -> IF expression THEN COLON program ELSE COLON program END SEMICOLON','if_else_statement',10,'p_if_else_statement','parser.py',84),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',91),
]
