
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programCOMMA DIVIDE EQUALS IDENTIFIER LBRACKET LPAREN MINUS NUMBER PLUS RBRACKET RPAREN SEMICOLON STRING TIMESprogram : program statement\n               | statementstatement : expression SEMICOLONexpression : IDENTIFIER EQUALS expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : NUMBERexpression : IDENTIFIERexpression : LBRACKET arguments RBRACKETarguments : expression\n                 | arguments COMMA expression\n                 | emptyexpression : STRINGexpression : IDENTIFIER LPAREN arguments RPARENempty :'
    
_lr_action_items = {'IDENTIFIER':([0,1,2,6,8,9,10,11,12,13,14,15,26,],[4,4,-2,4,-1,-3,4,4,4,4,4,4,4,]),'NUMBER':([0,1,2,6,8,9,10,11,12,13,14,15,26,],[5,5,-2,5,-1,-3,5,5,5,5,5,5,5,]),'LBRACKET':([0,1,2,6,8,9,10,11,12,13,14,15,26,],[6,6,-2,6,-1,-3,6,6,6,6,6,6,6,]),'STRING':([0,1,2,6,8,9,10,11,12,13,14,15,26,],[7,7,-2,7,-1,-3,7,7,7,7,7,7,7,]),'$end':([1,2,8,9,],[0,-2,-1,-3,]),'SEMICOLON':([3,4,5,7,19,20,21,22,23,25,27,],[9,-10,-9,-15,-5,-6,-7,-8,-4,-11,-16,]),'PLUS':([3,4,5,7,17,19,20,21,22,23,25,27,28,],[10,-10,-9,-15,10,10,10,10,10,10,-11,-16,10,]),'MINUS':([3,4,5,7,17,19,20,21,22,23,25,27,28,],[11,-10,-9,-15,11,11,11,11,11,11,-11,-16,11,]),'TIMES':([3,4,5,7,17,19,20,21,22,23,25,27,28,],[12,-10,-9,-15,12,12,12,12,12,12,-11,-16,12,]),'DIVIDE':([3,4,5,7,17,19,20,21,22,23,25,27,28,],[13,-10,-9,-15,13,13,13,13,13,13,-11,-16,13,]),'EQUALS':([4,],[14,]),'RBRACKET':([4,5,6,7,16,17,18,19,20,21,22,23,25,27,28,],[-10,-9,-17,-15,25,-12,-14,-5,-6,-7,-8,-4,-11,-16,-13,]),'COMMA':([4,5,6,7,15,16,17,18,19,20,21,22,23,24,25,27,28,],[-10,-9,-17,-15,-17,26,-12,-14,-5,-6,-7,-8,-4,26,-11,-16,-13,]),'RPAREN':([4,5,7,15,17,18,19,20,21,22,23,24,25,27,28,],[-10,-9,-15,-17,-12,-14,-5,-6,-7,-8,-4,27,-11,-16,-13,]),'LPAREN':([4,],[15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,],[2,8,]),'expression':([0,1,6,10,11,12,13,14,15,26,],[3,3,17,19,20,21,22,23,17,28,]),'arguments':([6,15,],[16,24,]),'empty':([6,15,],[18,18,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program statement','program',2,'p_program','parser.py',6),
  ('program -> statement','program',1,'p_program','parser.py',7),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','parser.py',14),
  ('expression -> IDENTIFIER EQUALS expression','expression',3,'p_expression_assign','parser.py',19),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',23),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',24),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',25),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',26),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',30),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',34),
  ('expression -> LBRACKET arguments RBRACKET','expression',3,'p_expression_list','parser.py',38),
  ('arguments -> expression','arguments',1,'p_arguments','parser.py',42),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','parser.py',43),
  ('arguments -> empty','arguments',1,'p_arguments','parser.py',44),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',54),
  ('expression -> IDENTIFIER LPAREN arguments RPAREN','expression',4,'p_expression_function_call','parser.py',59),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',63),
]
